data "aws_secretsmanager_secret" "{{ fqn }}" {
    name = "{{ params['master_password'] }}"
}

data "aws_secretsmanager_secret_version" "{{ fqn }}" {
    secret_id = "${data.aws_secretsmanager_secret.{{ fqn }}.id}"
}

module "{{ fqn }}" {
  source = "{{ module_source }}"
  env  = "{{ env }}"
  profile = "{{ profile }}"
  fqn = "{{ fqn }}"
  workload = "{{ workload }}"
  cmd_id = "{{ cmd_id }}"
  cluster_name   = "${replace("{{ profile }}_{{ resource_name }}", "_", "-")}"
  node_count      = {{ params['node_count'] | default(1) }}
    {%- if 'node_type' in params.keys() and params["node_type"] != ""  %}
  node_type = "{{ params['node_type'] }}"
    {% else %}
  node_type = "dc2.large"
    {% endif %}
  sg_enable_self = true

  database_name = "{{ params['database_name']}}"
  master_username = "{{ params['master_username']}}"
  master_password = data.aws_secretsmanager_secret_version.{{ fqn }}.secret_string

  vpc_id            = module.{{profile }}_aws_vpc_{{ params["vpc_id"] }}.id
  allowed_cidr    = [module.{{profile }}_aws_vpc_{{ params["vpc_id"] }}.cidr_block]
  subnets = [
    {%- if 'subnet_ids' in params.keys() and params["subnet_ids"] != ""  %}   
    {% set subnet_list = params["subnet_ids"].split(',') %}
    {% for subnet in subnet_list -%}
    module.{{ profile }}_aws_subnet_{{ subnet }}.id,
    {% endfor -%}
    {% endif %}
  ]

  kms_key_id      = aws_kms_key.{{ profile }}.arn
  enable_logging = true
  iam_roles = [module.{{ profile }}_glue_base.arn]

  parameters =  {
  {% if params['parameters'] is defined -%}
  {% for p, pv in params['parameters'].items() -%}
          "{{ p }}" = "{{  pv }}"
  {% endfor -%}
  {% endif -%}
  }

  tags = {
      {% if params['parameters'] is defined -%}
      {% for p, pv in params['tags'].items() -%}
          "{{ p }}" = "{{  pv }}"
      {% endfor -%}
      {% endif -%}
      "Name" = "{{ profile}}_{{ resource_name }}"
      "env" = "{{ env }}"
      "fqn" = "{{ fqn }}"
      "profile" = "{{ name }}"
      "workload" = "{{ workload }}"
      "client" = "{{ client }}"
      "author" = "rapid-cloud"
  }
}

module "{{ fqn }}_lambda" {
  source = "{{ module_source | replace('redshift_cluster', 'redshift_lambda') }}"
  env  = "{{ env }}"
  profile = "{{ profile }}"
  fqn = "{{ fqn }}"
  workload = "{{ workload }}"
  cmd_id = "{{ cmd_id }}"
  name   = "${replace("{{ fqn }}", "_", "-")}"
  subnets = [
    {%- if 'subnet_ids' in params.keys() and params["subnet_ids"] != ""  %}   
    {% set subnet_list = params["subnet_ids"].split(',') %}
    {% for subnet in subnet_list -%}
    module.{{ profile }}_aws_subnet_{{ subnet }}.id,
    {% endfor -%}
    {% endif %}
  ]
  redshift_sg = module.{{fqn}}.sg_id
  redshift_secret = aws_secretsmanager_secret.{{fqn}}_conn.arn


  tags = {
      {% if params['parameters'] is defined -%}
      {% for p, pv in params['tags'].items() -%}
          "{{ p }}" = "{{  pv }}"
      {% endfor -%}
      {% endif -%}
      "Name" = "{{ profile}}_{{ resource_name }}"
      "env" = "{{ env }}"
      "fqn" = "{{ fqn }}"
      "profile" = "{{ name }}"
      "workload" = "{{ workload }}"
      "client" = "{{ client }}"
      "author" = "rapid-cloud"
  }
}


resource "aws_secretsmanager_secret" "{{ fqn }}_conn" {
  description     = "{{ fqn }} connection string"
  kms_key_id      = aws_kms_key.{{ profile }}.arn
  name            = "{{ profile }}/{{ resource_type }}/{{ resource_name }}/connection_string"
  recovery_window_in_days  = 0
}

resource "aws_secretsmanager_secret_version" "{{ fqn }}_conn" {
  secret_id     = aws_secretsmanager_secret.{{ fqn }}_conn.id
  secret_string = jsonencode({
	"host"="${module.{{ fqn }}.dns_name}",
	"port"="${module.{{ fqn }}.port}",
  "user"="{{ params['master_username']}}",
  "password"="${data.aws_secretsmanager_secret_version.{{ fqn }}.secret_string}",
  "dbname"="{{ params['database_name']}}",
})
  depends_on = [module.{{ fqn }}.endpoint]
}

data "aws_subnet" "{{ fqn }}_glue_subnet" {
    {%- if 'subnet_ids' in params.keys() and params["subnet_ids"] != ""  %}   
    {% set subnet_list = params["subnet_ids"].split(',') %}
    id = module.{{ profile }}_aws_subnet_{{ subnet_list[0] }}.id
    {% endif %}
}


resource "aws_glue_connection" "{{ fqn }}_conn" {
  connection_properties = {
  JDBC_CONNECTION_URL = "jdbc:redshift://${module.{{ fqn }}.endpoint}/{{ params['database_name']}}"
  USERNAME            = "{{ params['master_username']}}"
  PASSWORD            = data.aws_secretsmanager_secret_version.{{ fqn }}.secret_string
  }

  name = "{{ fqn }}"

  physical_connection_requirements {
    availability_zone      = data.aws_subnet.{{ fqn }}_glue_subnet.availability_zone
    security_group_id_list = [module.{{ fqn }}.sg_id]
    subnet_id              = data.aws_subnet.{{ fqn }}_glue_subnet.id
  }
}


{% for k, v in params.items() %}
# {{k}} -> {{ v }}
{% endfor %}
